//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace AWModel
{
    public partial class SalesOrderHeader
    {
        #region Primitive Properties
    
        public virtual int SalesOrderID
        {
            get;
            set;
        }
    
        public virtual System.DateTime OrderDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DueDate
        {
            get;
            set;
        }
    
        public virtual bool OnlineOrderFlag
        {
            get;
            set;
        }
    
        public virtual string SalesOrderNumber
        {
            get;
            set;
        }
    
        public virtual string PurchaseOrderNumber
        {
            get;
            set;
        }
    
        public virtual string AccountNumber
        {
            get;
            set;
        }
    
        public virtual int CustomerID
        {
            get { return _customerID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerID != value)
                    {
                        if (Customer != null && Customer.CustomerID != value)
                        {
                            Customer = null;
                        }
                        _customerID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _customerID;
    
        public virtual Nullable<int> BillToAddressID
        {
            get { return _billToAddressID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_billToAddressID != value)
                    {
                        if (Address != null && Address.AddressID != value)
                        {
                            Address = null;
                        }
                        _billToAddressID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _billToAddressID;
    
        public virtual string CreditCardApprovalCode
        {
            get;
            set;
        }
    
        public virtual decimal SubTotal
        {
            get;
            set;
        }
    
        public virtual string Comment
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ShipDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Address Address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    FixupAddress(previousValue);
                }
            }
        }
        private Address _address;
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual ICollection<SalesOrderDetail> SalesOrderDetails
        {
            get
            {
                if (_salesOrderDetails == null)
                {
                    var newCollection = new FixupCollection<SalesOrderDetail>();
                    newCollection.CollectionChanged += FixupSalesOrderDetails;
                    _salesOrderDetails = newCollection;
                }
                return _salesOrderDetails;
            }
            set
            {
                if (!ReferenceEquals(_salesOrderDetails, value))
                {
                    var previousValue = _salesOrderDetails as FixupCollection<SalesOrderDetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSalesOrderDetails;
                    }
                    _salesOrderDetails = value;
                    var newValue = value as FixupCollection<SalesOrderDetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSalesOrderDetails;
                    }
                }
            }
        }
        private ICollection<SalesOrderDetail> _salesOrderDetails;
    
        public virtual SalesOrderHeaderShipping SalesOrderHeaderShipping
        {
            get { return _salesOrderHeaderShipping; }
            set
            {
                if (!ReferenceEquals(_salesOrderHeaderShipping, value))
                {
                    var previousValue = _salesOrderHeaderShipping;
                    _salesOrderHeaderShipping = value;
                    FixupSalesOrderHeaderShipping(previousValue);
                }
            }
        }
        private SalesOrderHeaderShipping _salesOrderHeaderShipping;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAddress(Address previousValue)
        {
            if (previousValue != null && previousValue.SalesOrderHeaders.Contains(this))
            {
                previousValue.SalesOrderHeaders.Remove(this);
            }
    
            if (Address != null)
            {
                if (!Address.SalesOrderHeaders.Contains(this))
                {
                    Address.SalesOrderHeaders.Add(this);
                }
                if (BillToAddressID != Address.AddressID)
                {
                    BillToAddressID = Address.AddressID;
                }
            }
            else if (!_settingFK)
            {
                BillToAddressID = null;
            }
        }
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.SalesOrderHeaders.Contains(this))
            {
                previousValue.SalesOrderHeaders.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.SalesOrderHeaders.Contains(this))
                {
                    Customer.SalesOrderHeaders.Add(this);
                }
                if (CustomerID != Customer.CustomerID)
                {
                    CustomerID = Customer.CustomerID;
                }
            }
        }
    
        private void FixupSalesOrderHeaderShipping(SalesOrderHeaderShipping previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.SalesOrderHeader, this))
            {
                previousValue.SalesOrderHeader = null;
            }
    
            if (SalesOrderHeaderShipping != null)
            {
                SalesOrderHeaderShipping.SalesOrderHeader = this;
            }
        }
    
        private void FixupSalesOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SalesOrderDetail item in e.NewItems)
                {
                    item.SalesOrderHeader = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesOrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.SalesOrderHeader, this))
                    {
                        item.SalesOrderHeader = null;
                    }
                }
            }
        }

        #endregion
    }
}
